use crate::bls12_381::*;
use ark_ec::hashing::curve_maps::swu::SWUParams;
use ark_ec::models::{ModelParameters, SWModelParameters};
use ark_ff::MontFp;

#[derive(Clone, Default, PartialEq, Eq)]
pub struct SwuIsoParameters;

impl ModelParameters for SwuIsoParameters {
    type BaseField = Fq;
    type ScalarField = Fr;

    /// COFACTOR = (x - 1)^2 / 3  = 76329603384216526031706109802092473003
    const COFACTOR: &'static [u64] = &[0x8c00aaab0000aaab, 0x396c8c005555e156];

    /// COFACTOR_INV = COFACTOR^{-1} mod r
    /// = 52435875175126190458656871551744051925719901746859129887267498875565241663483
    #[rustfmt::skip]
    const COFACTOR_INV: Fr = MontFp!(Fr, "52435875175126190458656871551744051925719901746859129887267498875565241663483");
}

// https://datatracker.ietf.org/doc/draft-irtf-cfrg-hash-to-curve/
// Hashing to Elliptic Curves
// 8.8.1.  BLS12-381 G1
// BLS12381G1_XMD:SHA-256_SSWU_RO_ is defined as follows:
// *  E': y'^2 = x'^3 + A' * x' + B', where
//      -  A' = 0x144698a3b8e9433d693a02c96d4982b0ea985383ee66a8d8e8981aefd881ac98936f8da0e0f97f5cf428082d584c1d
//      -  B' = 0x12e2908d11688030018b12e8753eee3b2016c1f0f24f4070a0b9c14fcef35ef55a23215a316ceaa5d1cc48e98e172be0
//      -  A' = 12190336318893619529228877361869031420615612348429846051986726275283378313155663745811710833465465981901188123677
//      -  B' = 2906670324641927570491258158026293881577086121416628140204402091718288198173574630967936031029026176254968826637280
//  *  Z: 11
impl SWModelParameters for SwuIsoParameters {
    const COEFF_A: Fq = MontFp!(Fq, "12190336318893619529228877361869031420615612348429846051986726275283378313155663745811710833465465981901188123677"); //sage doesn't approve of this

    #[rustfmt::skip]
    const COEFF_B: Fq = MontFp!(Fq, "2906670324641927570491258158026293881577086121416628140204402091718288198173574630967936031029026176254968826637280");

    /// AFFINE_GENERATOR_COEFFS = (G1_GENERATOR_X, G1_GENERATOR_Y)
    const AFFINE_GENERATOR_COEFFS: (Self::BaseField, Self::BaseField) =
        (G1_GENERATOR_X, G1_GENERATOR_Y);
}

// sage: Fq = E1p.base_field()
// sage: Fq
// Finite Field of size 4002409555221667393417789825735904156556882819939007885332058136124031650490837864442687629129015664037894272559787
// sage: Fq.primitive_element()
// 2
// sage: (Fq(11)/Fq(2)).sqrt()
// 1496378135713580363480696149166996094826100595588415922929784991932724092840119474685212307129579508222230250924394
impl SWUParams for SwuIsoParameters {
    const XI: Fq = MontFp!(Fq, "11"); // a nonsquare in Fq ietf standard
    const ZETA: Fq = MontFp!(Fq, "2"); // arbitatry primitive root of unity (element)
    const XI_ON_ZETA_SQRT: Fq = MontFp!(Fq, "1496378135713580363480696149166996094826100595588415922929784991932724092840119474685212307129579508222230250924394"); ////square root of THETA=Xi/Zeta Fq = MontFp!(Fq, "1496378135713580363480696149166996094826100595588415922929784991932724092840119474685212307129579508222230250924394"); ////square root of THETA=Xi/Zeta
}

// sage: E1p = g1_iso.domain()
// sage: gen_p = E1p.random_point()
// sage: gen_p = 76329603384216526031706109802092473003 * gen_p
// sage: gen_p
// (628127623378585612843095022119507708025289394540669560027004601611569871267541856210323712812047239723504248810248 : 344075650239127142968089520704786925624745533124141202280424406752399324209523628375922007963596482424831722220273 : 1)
// sage: gen_p * 52435875175126190479447740508185965837690552500527637822603658699938581184513
// (0 : 1 : 0)

/// G1_GENERATOR_X =
#[rustfmt::skip]
pub const G1_GENERATOR_X: Fq = MontFp!(Fq, "1020232295111649411126762359530270833151925872915888263107080350435116244445972822132949957555221231229957568042978");

/// G1_GENERATOR_Y =
#[rustfmt::skip]
pub const G1_GENERATOR_Y: Fq = MontFp!(Fq, "572738012940399893876716047881377207991025392386390068007901896139525257801331726850963609787517204283814804267188");
