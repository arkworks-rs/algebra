use ark_ff::{
    biginteger::BigInteger384 as BigInteger,
    fields::{FftParameters, Fp384, Fp384Parameters, FpParameters},
};

pub type Fr = Fp384<FrParameters>;

pub struct FrParameters;

pub const FR_ONE: Fr = ark_ff::field_new!(Fr, "1");

impl Fp384Parameters for FrParameters {}
impl FftParameters for FrParameters {
    type BigInt = BigInteger;

    const TWO_ADICITY: u32 = 12;

    // TWO_ADIC_ROOT_OF_UNITY = GENERATOR ^ T =
    // 1685271986666084262778868986067286870708440243287855288358961780551611799713704250599068248127477556627411635786779
    // t is defined below
    // This number needs to be in the Montgomery residue form.
    // I.e., write TWO_ADIC_ROOT_OF_UNITY * R
    // = 1539563187696293616856158973955665088899482868488546332850378941921984564611273075190849188323241758701638100060070
    const TWO_ADIC_ROOT_OF_UNITY: BigInteger = BigInteger([
        13480433396127238054u64,
        1703594782943735056u64,
        8417751128359587317u64,
        11248980344203883641u64,
        4705241879150942070u64,
        720773657239228462u64,
    ]);

    const SMALL_SUBGROUP_BASE: Option<u32> = Some(3);
    const SMALL_SUBGROUP_BASE_ADICITY: Option<u32> = Some(2);

    // LARGE_SUBGROUP_ROOT_OF_UNITY = GENERATOR ^ (T * 3 ^ 2)
    // = 3524614118565436050820346784762407349815771892452866211429575895239855511309348587252928054123237406857164753350910
    // This number needs to be in the Montgomery residue form.
    // I.e., write LARGE_SUBGROUP_ROOT_OF_UNITY * R
    // = 2243640460791708394678669425369274565832631199871689254948845545672204516674256702673568780556211844984291473787379
    const LARGE_SUBGROUP_ROOT_OF_UNITY: Option<BigInteger> = Some(BigInteger([
        16448235414327691763u64,
        6101416213029103415u64,
        1714659905601749299u64,
        18157817127906248745u64,
        7986749858655934624u64,
        1050399849371924948u64,
    ]));
}
impl FpParameters for FrParameters {
    /// MODULUS = 5945877603251831796258517492029536515488649313567122628445038208291596545947608789992834434053176523624102324539393
    const MODULUS: BigInteger = BigInteger([
        17382266338285916161u64,
        13339389119208890949u64,
        9581378667081472421u64,
        15205557732015452966u64,
        15076886007691743306u64,
        2783667458303802095u64,
    ]);

    const MODULUS_BITS: u32 = 382;

    const CAPACITY: u32 = Self::MODULUS_BITS - 1;

    const REPR_SHAVE_BITS: u32 = 2;

    // R = 2^{384} % MODULUS
    // 3726740576883488434727935147966394712147843389062710897278064154496142495811557871457259650565856499062014043070458
    const R: BigInteger = BigInteger([
        6386866412541812730u64,
        12197385653294412380u64,
        16298704292349371933u64,
        1000373976455040280u64,
        1772404322397298239u64,
        1744739323886739041u64,
    ]);

    // R2 = R * R % MODULUS
    // 743374565348571412572717835265798450620415736052604204514879248137607002524418551738269123252154404143816216787227
    const R2: BigInteger = BigInteger([
        7278302575398336795u64,
        13899913090107078051u64,
        14214418478611586731u64,
        17879031161354349451u64,
        934436771375522906u64,
        348023912527199718u64,
    ]);

    // INV = -(MODULUS)^{-1} mod 2^64
    const INV: u64 = 5652841145273880575;

    // GENERATOR = 5
    // This number needs to be in the Montgomery residue form.
    // Here, write 5 * R = 796070074661946784864123263743364014273269004612186601055206147605922841214962987307794950669752924437763241734111
    const GENERATOR: BigInteger = BigInteger([
        16681021195270418399u64,
        2522016835135837435u64,
        15855897313083339171u64,
        14725428907357497352u64,
        524851736330364506u64,
        372694244522288918u64,
    ]);

    // (mod - 1) / 2 = 2972938801625915898129258746014768257744324656783561314222519104145798272973804394996417217026588261812051162269696
    const MODULUS_MINUS_ONE_DIV_TWO: BigInteger = BigInteger([
        17914505205997733888u64,
        15893066596459221282u64,
        4790689333540736210u64,
        7602778866007726483u64,
        16761815040700647461u64,
        1391833729151901047u64,
    ]);

    // T and T_MINUS_ONE_DIV_TWO, where MODULUS - 1 = 2^S * T
    // S = 12

    /// T = (MODULUS - 1) / 2^S =
    /// 1451630274231404247133427122077523563351721023820098297960214406321190562975490427244344344251263799712915606577
    const T: BigInteger = BigInteger([
        2620835100870003761u64,
        11122644166774436482u64,
        3632240503436762713u64,
        336978666793584539u64,
        12609256237382989921u64,
        679606313062451u64,
    ]);

    /// (T - 1) / 2 =
    /// 725815137115702123566713561038761781675860511910049148980107203160595281487745213622172172125631899856457803288
    const T_MINUS_ONE_DIV_TWO: BigInteger = BigInteger([
        1310417550435001880u64,
        14784694120241994049u64,
        11039492288573157164u64,
        9391861370251568077u64,
        15528000155546270768u64,
        339803156531225u64,
    ]);
}
