use ark_ff::{
    biginteger::BigInteger384 as BigInteger,
    fields::{Fp384, MontBackend},
    BigInt, MontFp,
};

pub struct FqConfig;
pub type Fq = Fp384<MontBackend<FqConfig, 6>>;

impl ark_ff::MontConfig<6> for FqConfig {
    /// MODULUS = 5945877603251831796258517492029536515488649313567122628447476625319762940580461319088175968449723373773214087057409
    const MODULUS: BigInteger = BigInt!("5945877603251831796258517492029536515488649313567122628447476625319762940580461319088175968449723373773214087057409");

    /// GENERATOR = 7
    const GENERATOR: Fq = ark_ff::MontFp!(Fq, "7");

    const TWO_ADIC_ROOT_OF_UNITY: Fq = MontFp!(Fq, "4563474743154071393992783416618298946273483760389666561454590580850277486490043009369759159902206584965352075028870");

    const SMALL_SUBGROUP_BASE: Option<u32> = Some(3);
    const SMALL_SUBGROUP_BASE_ADICITY: Option<u32> = Some(2);

    // LARGE_SUBGROUP_ROOT_OF_UNITY = GENERATOR ^ (t * 3 ^ 2) =
    // 203100967768496856767841701771526315192814992286543641883928020883407386213917566206874176054653008117753458021037
    const LARGE_SUBGROUP_ROOT_OF_UNITY: Option<Fq> = Some(MontFp!(Fq, "683178638573601328773157856456805978879544571597638024782973348263890473503149166479735097908137632291366958273030"));
}

pub const FQ_ONE: Fq = MontFp!(Fq, "1");
pub const FQ_ZERO: Fq = MontFp!(Fq, "0");
