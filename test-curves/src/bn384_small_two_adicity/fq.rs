use ark_ff::{
    biginteger::BigInteger384 as BigInteger,
    fields::{FftParameters, Fp384, Fp384Parameters, FpParameters},
};

pub type Fq = Fp384<FqParameters>;

pub struct FqParameters;

impl Fp384Parameters for FqParameters {}
impl FftParameters for FqParameters {
    type BigInt = BigInteger;

    const TWO_ADICITY: u32 = 12;

    // TWO_ADIC_ROOT_OF_UNITY = GENERATOR ^ t =
    // 4563474743154071393992783416618298946273483760389666561454590580850277486490043009369759159902206584965352075028870
    // t is defined below
    // This number needs to be in the Montgomery residue form.
    // I.e., write TWO_ADIC_ROOT_OF_UNITY * R
    // = 31697142653270303559937416477969693485777517469743380851550419037088206541495408586849687582005649424923407072789
    const TWO_ADIC_ROOT_OF_UNITY: BigInteger = BigInteger([
        11341361458440748565u64,
        11432203502797436080u64,
        15207341022279519515u64,
        47188373187644751u64,
        123916096934654777u64,
        14839576327112111u64,
    ]);

    const SMALL_SUBGROUP_BASE: Option<u32> = Some(3);
    const SMALL_SUBGROUP_BASE_ADICITY: Option<u32> = Some(2);

    // LARGE_SUBGROUP_ROOT_OF_UNITY = GENERATOR ^ (t * 3 ^ 2) =
    // 203100967768496856767841701771526315192814992286543641883928020883407386213917566206874176054653008117753458021037
    // I.e., write LARGE_SUBGROUP_ROOT_OF_UNITY * R
    // = 81125788721017958531970004711554176763707237538772656640376499392204495132484005854811881368159718832226698073199
    const LARGE_SUBGROUP_ROOT_OF_UNITY: Option<BigInteger> = Some(BigInteger([
        6225018931355915375u64,
        180290822448891806u64,
        14465855242330424160u64,
        8575642455718703211u64,
        8320153096556229121u64,
        37980468681094481u64,
    ]));
}

impl FpParameters for FqParameters {
    /// MODULUS = 5945877603251831796258517492029536515488649313567122628447476625319762940580461319088175968449723373773214087057409
    const MODULUS: BigInteger = BigInteger([
        2340831834029625345u64,
        7249631296803227205u64,
        16747242270977641452u64,
        15205557732015452966u64,
        15076886007691743306u64,
        2783667458303802095u64,
    ]);

    const MODULUS_BITS: u32 = 382;

    const CAPACITY: u32 = Self::MODULUS_BITS - 1;

    const REPR_SHAVE_BITS: u32 = 2;

    // R = 2^{384} % MODULUS
    // R = 3726740576883488434727935147966394712147843389062710897263433652327144128014442696885210444186575398167343467962362
    const R: BigInteger = BigInteger([
        4401753069531799546u64,
        11842444440309291617u64,
        10197010816391460981u64,
        1000373976455040278u64,
        1772404322397298239u64,
        1744739323886739041u64,
    ]);

    // R2 = R * R % MODULUS
    // R2 = 3383647891563276668075677154877236888682502454192504651186644086866057738042913461398173437153800906409349899530047
    const R2: BigInteger = BigInteger([
        16517710552441204543u64,
        4787934104620433613u64,
        12185556526193827174u64,
        10815510726684521116u64,
        3531299847928964248u64,
        1584114432653590388u64,
    ]);

    // INV = -(MODULUS)^{-1} mod 2^64
    const INV: u64 = 887568002135035903u64;

    // GENERATOR = 7
    // This number needs to be in the Montgomery residue form.
    // I.e., write 7 * R % MODULUS =
    // 2303673625177091858061476067646616923080306469170485767054129065010957133779253601843769235507134292078547927506898
    const GENERATOR: BigInteger = BigInteger([
        3002200076894543826u64,
        17005097747533029268u64,
        4390106630829661061u64,
        1520619128252124930u64,
        7439518447142769294u64,
        1078505433991964904u64,
    ]);

    // (mod - 1) / 2 = 2972938801625915898129258746014768257744324656783561314223738312659881470290230659544087984224861686886607043528704
    const MODULUS_MINUS_ONE_DIV_TWO: BigInteger = BigInteger([
        10393787953869588480u64,
        3624815648401613602u64,
        8373621135488820726u64,
        7602778866007726483u64,
        16761815040700647461u64,
        1391833729151901047u64,
    ]);

    // T and T_MINUS_ONE_DIV_TWO, where MODULUS - 1 = 2^S * T
    // S = 12

    /// T = (MODULUS - 1) / 2^S =
    /// 1451630274231404247133427122077523563351721023820098297960809722978457749165151689230511711047295745550101095473
    const T: BigInteger = BigInteger([
        7228848894076625969u64,
        13746755992250574892u64,
        3633989981855682676u64,
        336978666793584539u64,
        12609256237382989921u64,
        679606313062451u64,
    ]);

    /// (T - 1) / 2 =
    /// 72581513711570212356671356103876178167586051191004914898040486148922887458257584461525585552364787277505054773
    const T_MINUS_ONE_DIV_TWO: BigInteger = BigInteger([
        3614424447038312984u64,
        6873377996125287446u64,
        11040367027782617146u64,
        9391861370251568077u64,
        15528000155546270768u64,
        339803156531225u64,
    ]);
}
