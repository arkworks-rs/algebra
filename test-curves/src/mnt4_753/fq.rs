use ark_ff::{
    biginteger::BigInteger768 as BigInteger,
    fields::{Fp768, MontBackend, MontConfig},
    BigInt,
};

pub type Fq = Fp768<MontBackend<FqConfig, 12>>;
pub struct FqConfig;

impl MontConfig<12> for FqConfig {
    /// MODULUS = 41898490967918953402344214791240637128170709919953949071783502921025352812571106773058893763790338921418070971888253786114353726529584385201591605722013126468931404347949840543007986327743462853720628051692141265303114721689601
    const MODULUS: BigInteger = BigInt!("41898490967918953402344214791240637128170709919953949071783502921025352812571106773058893763790338921418070971888253786114353726529584385201591605722013126468931404347949840543007986327743462853720628051692141265303114721689601");

    const GENERATOR: Fq = ark_ff::MontFp!(Fq, "17");

    const TWO_ADIC_ROOT_OF_UNITY: Fq = ark_ff::MontFp!(Fq, "40577822398412982719876671814347622311725878559400100565221223860226396934830112376659822430317692232440883010225033880793828874730711721234325694240460855741763791540474706150170374090550695427806583236301930157866709353840964");

    const SMALL_SUBGROUP_BASE: Option<u32> = Some(5);
    const SMALL_SUBGROUP_BASE_ADICITY: Option<u32> = Some(2);

    const LARGE_SUBGROUP_ROOT_OF_UNITY: Option<Fq> = Some(ark_ff::MontFp!(Fq, "12249458902762217747626832919710926618510011455364963726393752854649914979954138109976331601455448780251166045203053508523342111624583986869301658366625356826888785691823710598470775453742133593634524619429629803955083254436531"));
}
